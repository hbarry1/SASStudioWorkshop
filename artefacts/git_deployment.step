{"type":"code","name":"git_deployment.step","displayName":"git_deployment.step","description":"","templates":{"SAS":"/* Git Setup */\n%let git_url=%nrstr(https://github.com/hbarry1/hb_test.git);\n%let tgt_dir=%nrstr(/gelcontent/warehouseRepo);\n\n%let git_branch=%sysfunc(ifc(\"&git_branch_lst.\"=\"other\", %nrstr(&other_branch.),\n\t%sysfunc(ifc(\"&git_branch_lst.\"=\"main (dev)\",main,%nrstr(&git_branch_lst.)))));\n\n%global git_rc;\n\n/* Utility */\n%macro returnCodeCheck(actualCode,expectedCode);\n\t%if &actualCode ne &expectedCode %then %do;\n\t\t%put ERROR: Expected return code was &expectedCode but got &actualCode.. Will abort;\n\t\tdata _null_;\n\t\t\t/*abort abend 2;*/\n\t\t\tabort cancel;\n\t\trun;\n\t%end;\n%mend;\n\n/* Initialize git repo in work folder by creating a temp git dir below &sasworkdir */\n%let sasworkdir=%sysfunc(getoption(work));\n%let runid=%sysfunc(md5(%sysfunc(datetime())),$hex4.);\n%let devops_gitdir=&sasworkdir./git&runid.;\n\noptions dlcreatedir;\nlibname _create \"&devops_gitdir.\";\nlibname _create clear;\n\ndata _null_;\n    rc = GIT_CLONE (\n\t\t\"&git_url\", \n\t\t\"&devops_gitdir\", \n\t\t\"&git_user\", \n\t\t\"&git_pwd\");          \n    call symput('git_rc',strip(put(rc,best32.)));\nrun;\n%returnCodeCheck(&git_rc,0);\n\n/* If &git_branch ne main (i.e. dev) then perform check out of the branch named the same */\n%if %str(&git_branch) ne %str(main) %then %do;\n\tdata _null_;\n\t    rc = GIT_BRANCH_CHKOUT (\n\t\t\t\"&devops_gitdir\", \n\t\t\t\"origin/&git_branch.\"); \n\t    call symput('git_rc',strip(put(rc,best32.)));\n\trun;\n\t%returnCodeCheck(&git_rc,0);\n%end;\n\n\n/* Copy files from &devops_gitdir./artefacts to &tgt_dir./artefacts */\n%let py_delRC=0;\n%let py_cpyRC=0;\nproc python restart;\nsubmit;\nimport shutil, os\n\nsrc=SAS.symget('devops_gitdir') + '/artefacts'\ntgt=SAS.symget('tgt_dir') + '/artefacts'\n\n# clear down target\nfor filename in os.listdir(tgt):\n\tfpath = os.path.join(tgt,filename)\n\ttry:\n\t\tif os.path.isfile(fpath) or os.path.islink(fpath):\n\t\t\tos.unlink(fpath)\n\t\telif os.path.isdir(fpath):\n\t\t\tshutil.rmtree(fpath)\n\texcept Exception as e:\n\t\tprint('Failed to delete %s. Reason: %s' % (fpath,e))\n\t\tSAS.symput('py_delRC',99)\n\nendsubmit;\nquit;\n%returnCodeCheck(&py_delRC.,0);\n\nproc python;\nsubmit;\n# copy from src to tgt\ncpyRc = os.system('cp -R ' + src + '/* ' + tgt)\nif cpyRc != 0:\n\tprint('Failed to copy files to ' + tgt)\n\tSAS.symput('py_cpyRC',99)\n\n# clear down git folder in saswork\nwork_repo=SAS.symget('devops_gitdir')\nos.system('rm -rf ' + work_repo)\nendsubmit;\nrun;\n%returnCodeCheck(&py_cpyRC.,0);\n\n%put NOTE: Deployment from &git_branch. completed successfully.;\n"},"properties":{},"ui":"{\n\t\"showPageContentOnly\": true,\n\t\"pages\": [\n\t\t{\n\t\t\t\"id\": \"page1\",\n\t\t\t\"type\": \"page\",\n\t\t\t\"label\": \"Page 1\",\n\t\t\t\"children\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"infoTxt\",\n\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\"text\": \"Provide GIT credentials & required branch for extracting to /ifb/warehouse/ifb_lei_solution/artefacts\",\n\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"git_user\",\n\t\t\t\t\t\"type\": \"textfield\",\n\t\t\t\t\t\"label\": \"Git User Id or Email\",\n\t\t\t\t\t\"placeholder\": \"\",\n\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"git_pwd\",\n\t\t\t\t\t\"type\": \"textfield\",\n\t\t\t\t\t\"label\": \"Git Password (encoded)\",\n\t\t\t\t\t\"placeholder\": \"\",\n\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"git_branch_lst\",\n\t\t\t\t\t\"type\": \"dropdown\",\n\t\t\t\t\t\"label\": \"Git Branch to be Deployed\",\n\t\t\t\t\t\"items\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"value\": \"main (dev)\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"value\": \"test_branch\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"value\": \"prod_branch\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"value\": \"other\"\n\t\t\t\t\t\t}\n\t\t\t\t\t],\n\t\t\t\t\t\"required\": true,\n\t\t\t\t\t\"placeholder\": \"\",\n\t\t\t\t\t\"visible\": \"\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"id\": \"other_branch\",\n\t\t\t\t\t\"type\": \"textfield\",\n\t\t\t\t\t\"label\": \"Type Required Branch Name \",\n\t\t\t\t\t\"placeholder\": \"\",\n\t\t\t\t\t\"required\": false,\n\t\t\t\t\t\"visible\": [\n\t\t\t\t\t\t\"$git_branch_lst\",\n\t\t\t\t\t\t\"=\",\n\t\t\t\t\t\t\"other\"\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t],\n\t\"syntaxversion\": \"1.3.0\",\n\t\"values\": {\n\t\t\"git_user\": \"\",\n\t\t\"git_pwd\": \"\",\n\t\t\"git_branch_lst\": null,\n\t\t\"other_branch\": \"\"\n\t}\n}","flowMetadata":{"inputPorts":[],"outputPorts":[]}}